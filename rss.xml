<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Yunitto's blog]]></title><description><![CDATA[Yunitto's blog]]></description><link>http://github.com/dylang/node-rss</link><generator>GatsbyJS</generator><lastBuildDate>Sat, 16 Nov 2019 12:51:02 GMT</lastBuildDate><item><title><![CDATA[Love. OOO.]]></title><link>https://yunitto.github.io/posts/seville/</link><guid isPermaLink="false">https://yunitto.github.io/posts/seville/</guid><pubDate>Sat, 16 Nov 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;유럽 배낭여행 중의 일이다. 첫 여행지였던 영국 런던을 떠나 스페인 세비야로 가는 길이었다. 한국에서부터 함께한 동행과 일정상 며칠 떨어져 처음으로 홀로 다니게 된 나는 겉으로 긴장한 티를 내지 않기 위해 두배로 신경을 곤두세운 상태였다.&lt;/p&gt;
&lt;p&gt;나는 일찍 비행기에 올랐다. 복도를 사이에 두고 양쪽에 대략 두세 개씩의 좌석이 있는 기종이었다. 저가 항공답게 좌석은 매우 비좁고 딱딱했다. 그래도 다행히 복도 쪽 자리니까. 무사히 비행기를 탔다는 사실에 안도하고 비행기에 들어오는 사람들을 여유롭게 쳐다보던 중에 한 사람이 눈에 띄었다. 할머니-라고 부를 수밖에 없는 그녀는 몸집이 매우 컸고 거동이 불편해서 지팡이와 승무원의 부축을 받으며 들어오고 있었다. 절뚝. 설마 내 옆은 아니겠지. 절뚝, 설마, 절뚝, 절뚝, … 그들은 마침내 내 옆에 멈춰 섰다. 가까이에서 본 그녀는 생각보다 더 큰 몸집이었다. 그리고 뒤에 그녀와 닮고 안경을 쓴 한 명의 여성이 더 있다는 걸 눈치챘을 무렵에 뒤의 여성이 내게 말을 건넸다. “안녕, 정말 미안한데 내 언니가 몸이 많이 불편하거든. 혹시 너가 안에 앉고, 언니가 바깥쪽에 앉아도 될까?” 몸이 불편한 할머니는 곤란하게 해서 미안하다는 듯한 표정을 짓고 있었다. “당연하죠.” 나는 냉큼 안쪽으로 들어갔지만 그녀가 자리에 앉기까지는 한참이 걸렸다. 그녀가 앉기 위해선 좌석 사이의 팔받침대를 올려야 했다. 옆자리가 낯선 아저씨였으면 절대 올리지 않았을 텐데. 그녀가 자리에 앉자 내 자리의 절반이 삽시간에 사라졌다. 나는 낯선 이와 허벅지를 맞댔고 어깨는 잔뜩 움츠러든 채 꽉 끼어버렸다. “휴, 고마워. 내가 좀 빅(big)-하잖아” 할머니는 껄껄 웃으면서 복도 건너 앉은 동생에게 선글라스를 건넸다. 할머니가 지팡이를 주섬주섬 정리하느라 몸을 들썩이는 동안 나는 끼어버린 몸에서 오는 불편함과 대조되는 그녀의 유쾌함에 어리둥절한 채로 몸도 머리도 옴짝달싹 못했다. “오, 불편하게 해서 정말 미안해. 너는 이름이 뭐야?” 그렇게 나는 일흔이 넘은 그녀와 대화를 시작했다.&lt;/p&gt;
&lt;p&gt;그녀는 파키스탄 출신이고 영국에 살고 있다고 했다. 여동생과 함께 스페인에 사는 다른 동생을 보러 가는 길인데 동생 집은 세비야에서 한번 더 차를 타고 들어가야 하는 작은 마을에 있다고 했다. 한국에서 왔다는 나의 말에 그녀는 “오!” 하며 감탄하더니 갑자기 “아/녀\하-새오” 라는 한국말 인사를 건넸다. 세상에, 유럽 상공의 작은 비행기에서 벽 사이에 끼어 움츠러든 채로 파키스탄 할머니에게 한국말 인사를 들을 줄이야. 놀란 내게 할머니는 자신의 며느리가 한국인이라고, 며느리가 종종 김치를 가져와서 자신도 맛있게 먹는다며 얘기를 꺼냈다. 한국사람과 친해지기 위해선 김치와 불고기, 유나킴과 지송팍이 최고라는 걸 알고 있었던 걸까. 그녀는 정말 수다가 많은 사람이었다. 한국은 경쟁이 매우 치열하다며, 너는 대학에서 어떤 걸 공부하니? 두어시간 동안 그녀의 여동생이 배낭에서 꺼내 준 빵을 뜯어먹으며 한국 사회, 세비야의 날씨, 파키스탄 음식, 가족관계, 내 유럽여행에 대한 얘기를 하다가 그녀는 더웠는지 잠시 말을 멈추고 손수건으로 땀을 닦았다. 그 틈을 타서 잔뜩 움츠러든 내 어깨와 엉덩이의 감각을 되찾으려 몸을 조금씩 뒤척이려던 찰나에 그녀가 상체를 숙이고 가방을 뒤적거리는 바람에 또다시 꽉 끼어버렸다. 대화의 즐거움과는 별개로 낯선 사람과 맞닿은 내 오른쪽 겨드랑이와 허벅지는 땀으로 축축해지고 있었다. 두 시간짜리 비행이어서 다행이야. 잠시 숨을 고르던 내 눈앞에 갑자기 찢어진 종이가 쑥 나타났다. “너 펜 있니? 여기에 이메일 주소를 써줄래? 메일 보낼게.”&lt;/p&gt;
&lt;p&gt;덜컹, 하며 비행기의 뒷바퀴가 활주로에 닿고 마침내 앞바퀴까지 착지하자 비행기에선 빵빠레가 울려 퍼지고 사람들은 박수를 치며 휘파람을 불었다. 그녀도 박수를 치며 말했다. “스페인 사람들은 정말 유쾌해!” 내가 보기엔 그녀도 정말 유쾌했는데 말이다. 이윽고 사람들이 다 내렸지만 그녀가 내리기 전까지 나는 내리지 못했다. 안쪽에선 내가 왼팔을, 복도에선 그녀의 여동생이 오른팔을 부축해서 그녀를 일으켰다. 그녀는 한 줄 한 줄 좌석 헤드를 짚으며 천천히 걸어갔다. 복도 끝에선 휠체어가 그녀를 기다리고 있었다. “잘 가! 즐거운 여행되길!” 그녀는 휠체어에 앉으며 내게 인사했다. 나 역시 안전한 여행이 되시라며 두 자매에게 인사를 하고 얼얼한 몸을 움직이며 입국 심사대로 향했다.&lt;/p&gt;
&lt;p&gt;약 일주일 후에 짧은 메일이 왔다. 그녀의 여동생으로부터 온 메일이었다. 만나서 반가웠고 함께 해서 즐거웠다고. 즐거운 여행이 되길 바란다고. Love. OOO. 왠지 모르게 울컥해졌던 나는 답장을 하지 못하고 메일을 닫았다. 그렇게 나는 여행을 마치고 한국에 돌아왔고, 개강을 해서 바쁜 일상을 살며 여행의 기억들도, 과제 메일 더미 속에 그녀의 이메일도 잊혔다. 여행의 추억은 일상으로 지워진다는 참으로 진부한 결말이지만 일 년에도 몇번씩 그녀와 이메일 생각이 났다. 나는 왜 답장하지 않았을까. 이유 없는 친절함은 없다는 의심? 타인이 건넨 따뜻함을 간직하는 것에 대한 두려움?  지금 답장하면 너무 늦었을까, 이제야 답장하는게 웃기지 않을까 생각하다가 어느새 6년이 훌쩍 지났다. 그때 보냈다면 지금보다는 덜 늦었을 텐데. 지금은 정말 늦었을 수도 있는데.&lt;/p&gt;
&lt;p&gt;그리고 6년만에 답장을 보냈다. 답장이 너무 늦어서 미안하다고. 당신 자매와 함께해서 나 역시 매우 즐거웠다고. 덕분에 긴장을 풀고 나머지 여행도 좋은 시간을 보낼 수 있어서 고마웠다고. 당신이 건네준 따뜻함이 아직도 남아있다고.  답장을 보내기까지 긴 시간이 걸렸지만 당신 자매의 안녕을 종종 빌어왔다고. 그리고 앞으로도 안녕하길 바란다고.&lt;/p&gt;
&lt;p&gt;Love. OOO.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[기계식 키보드 Vortex Race 3 적축 리뷰]]></title><description><![CDATA[성공적인 첫 기계식 키보드 입문기]]></description><link>https://yunitto.github.io/posts/vortex-race3-review/</link><guid isPermaLink="false">https://yunitto.github.io/posts/vortex-race3-review/</guid><pubDate>Fri, 04 Oct 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;&lt;img src=&quot;/media/vortex-race3-1.jpeg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;키보드를-왜-샀느냐&quot;&gt;&lt;a href=&quot;#%ED%82%A4%EB%B3%B4%EB%93%9C%EB%A5%BC-%EC%99%9C-%EC%83%80%EB%8A%90%EB%83%90&quot; aria-label=&quot;키보드를 왜 샀느냐 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;키보드를 왜 샀느냐&lt;/h2&gt;
&lt;p&gt;얼마 전, 회사에서 동료들이랑 수다를 떨다가 “00님은 출근 직후와 퇴근 직전의 자세(목/어깨)가 너무 달라요” 라는 말을 듣고 충격을 받아 &lt;code class=&quot;language-text&quot;&gt;코딩환경 개선 프로젝트&lt;/code&gt;에 들어갔다. &lt;/p&gt;
&lt;h2 id=&quot;기존-작업방식&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%A1%B4-%EC%9E%91%EC%97%85%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;기존 작업방식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기존 작업방식&lt;/h2&gt;
&lt;p&gt;기존에는 15인치 맥프로 + 32인치 모니터로 작업을 했다. 키보드와 마우스는 그냥 맥북에 붙어있는걸 사용하고, 주 화면으로 맥프로를 봤다. 근데 모니터와 맥프로를 안겹치게 두느라 맥프로가 좀 아래에 있다보니 점점 목이 거북이처럼 나왔다. 늦게까지 일하는 날이면 어깨가 뻐근해지며 고등학생때부터 앓았던 오십견이 찾아왔다. 옆자리의 시니어분은 작업환경 최적화에 통달하신 분인데, 자주 걱정을 해주시며 모니터암과 키보드를 영업하곤 하셨다. 더 나이들면 정말 아플 것 같아 걱정이 됐다.&lt;/p&gt;
&lt;h2 id=&quot;방황기--구매기&quot;&gt;&lt;a href=&quot;#%EB%B0%A9%ED%99%A9%EA%B8%B0--%EA%B5%AC%EB%A7%A4%EA%B8%B0&quot; aria-label=&quot;방황기  구매기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;방황기 &amp;#x26; 구매기&lt;/h2&gt;
&lt;p&gt;시니어분의 영향으로 키보드에 관심을 갖게된 나는 주변 공대친구들의 조언을 구해가며 입문할만한 키보드를 알아보기 시작했다. 그러다 친구가 해피해킹을 빌려줬는데 적응에 실패했다. 무접점방식은 내게 맞지 않았고, 글자가 새겨져있지 않은 무각키보드인데다가, 맥과 함께 사용하기엔 외워야할 단축키가 많게 느껴졌다. &lt;strong&gt;그리고 무엇보다 첫 키보드는 예쁜걸 쓰고싶었다!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;방황하던 와중에 지난 일요일, 다음날 출근할 생각에 자고싶지 않던 나는 네이버쇼핑에서 키보드 사냥에 나섰다. 해피해킹, 레오폴드, 리얼포스 등 온갖 유명한 브랜드를 알아보았지만 맘에 들지 않았다. 그러다 우연히 Vortex Race 3를 발견하고 꽂혀버렸다! 레고같은 알록달록한 색깔은 회색빛 키보드에 뉴트로 감성을 선사했고, 텐키리스배열로 컴팩트한 사이즈와 디자인이 맘에 들었다. 맥 호환 키가 있는 것도 좋았다. (윈도우키 싫엉…)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/media/vortex-race3-2.jpeg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;사용기&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EA%B8%B0&quot; aria-label=&quot;사용기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용기&lt;/h2&gt;
&lt;h3 id=&quot;맥-호환성&quot;&gt;&lt;a href=&quot;#%EB%A7%A5-%ED%98%B8%ED%99%98%EC%84%B1&quot; aria-label=&quot;맥 호환성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;맥 호환성&lt;/h3&gt;
&lt;p&gt;&lt;kbd&gt;Pn + M&lt;/kbd&gt; 키를 눌러 MacOS 배열로 바꿀 수 있다.(맥, 리눅스, 윈도우 지원) 그러나 잘 호환되지 않는다는 리뷰를 많이 읽었다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;맥 키보드의 &lt;kbd&gt;[ctrl][option][cmd]&lt;/kbd&gt; 배열이 볼텍스에서는 &lt;kbd&gt;[ctrl][cmd][option]&lt;/kbd&gt;으로 된다. ==&gt; 이건 최신 펌웨어를 다운받으면 해결된다. 펌웨어 업데이트는 윈도우에서만 할 수 있다. &lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;Fn&lt;/kbd&gt; 키가 호환이 잘 안된다. ==&gt; 이건 내가 원래 펑션키를 잘 사용하지 않아서 사실상 문제가 되지 않았다. 물론 &lt;kbd&gt;F&lt;/kbd&gt; 키 옆면에 새겨진 사인들과 실제 키가 다르게 작동하지만 ( &lt;kbd&gt;F1~F3&lt;/kbd&gt;키에 볼륨사인이 있지만 &lt;kbd&gt;F10~F12&lt;/kbd&gt; 에서 작동한다.) 크게 신경쓰이진 않는다. 프로그래밍으로 키 커스터마이징이 가능하고 레딧 등에 정보가 많이 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;타건감--소리&quot;&gt;&lt;a href=&quot;#%ED%83%80%EA%B1%B4%EA%B0%90--%EC%86%8C%EB%A6%AC&quot; aria-label=&quot;타건감  소리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;타건감 &amp;#x26; 소리&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;타건감&lt;/strong&gt;: 눌렀을 때 가볍게 서걱서걱 잘 들어가서 좋다. 아무도 밟지 않은 눈밭을 걸어가는 느낌이 손으로 전해진다..! &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;소리&lt;/strong&gt;: 기계식이라 소리를 좀 많이 걱정했는데, 다행히 소리가 크지 않다. 수박자르는 소리 정도..!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;디자인&quot;&gt;&lt;a href=&quot;#%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;디자인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;디자인&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;톤다운된 원색 키가 예쁘다!!! 이것이 진정한 뉴트로!&lt;/li&gt;
&lt;li&gt;맥 호환키와 색깔키가 제품에 포함되어있다.&lt;/li&gt;
&lt;li&gt;&lt;kbd&gt;ESC&lt;/kbd&gt; 키가 일반 키보다 커서(약 1.5배) vi로 코딩하는게 기대된다!&lt;/li&gt;
&lt;li&gt;배열이 조금씩 어긋나있다는 말이 있는데 크게 거슬리진 않음. (유튜브 리뷰에서 봄)&lt;/li&gt;
&lt;li&gt;실제 키조합과 매칭되지 않는 키 옆면의 사인들이 있는데 크게 거슬리진 않음.&lt;/li&gt;
&lt;li&gt;뒤쪽이 조금 높게 나사를 추가할 수 있다.
&lt;img src=&quot;/media/vortex-race3-side.jpeg&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;이렇게 첫 키보드 입문기를 성공적으로 시작했다. 역시 예쁜게 짱이야 :)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[스파크 완벽 가이드]]></title><description><![CDATA[<스파크 완벽 가이드: 스파크를 확용한 빅데이터 처리와 분석의 모든 것>]]></description><link>https://yunitto.github.io/posts/spark-the-definite-guide/</link><guid isPermaLink="false">https://yunitto.github.io/posts/spark-the-definite-guide/</guid><pubDate>Thu, 23 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;p&gt;한빛 미디어의 &lt;a href=&quot;https://book.naver.com/bookdb/book_detail.nhn?bid=14300380&quot;&gt;&amp;#x3C;스파크 완벽 가이드: 스파크를 확용한 빅데이터 처리와 분석의 모든 것&gt;&lt;/a&gt;을 공부하며 정리한 내용입니다.&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;spark-application은-driver-process와-executor-process-로-구성&quot;&gt;&lt;a href=&quot;#spark-application%EC%9D%80-driver-process%EC%99%80-executor-process-%EB%A1%9C-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;spark application은 driver process와 executor process 로 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spark Application은 &lt;strong&gt;driver process&lt;/strong&gt;와 &lt;strong&gt;executor process&lt;/strong&gt; 로 구성.&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;driver process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;main()&lt;/code&gt; 함수 실행&lt;/li&gt;
&lt;li&gt;Application 정보 관리, exceutor process 관리&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;executor process&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;driver가 할당한 코드 실행, 다시 보고. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;JVM 위의 SparkSession 객체가 진입점이 된다.&lt;/li&gt;
&lt;li&gt;Spark API 는 크게 두가지 - structured, unstructured&lt;/li&gt;
&lt;li&gt;하나의 SparkSession은 하나의 SparkApplication에 대응한다. 즉, 앱 하나당 하나의 드라이버 프로세스가 존재.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// def range(end: Long): org.apache.spark.sql.Dataset[Long]&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;// def toDF(colNames: String*): DataFrame&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; spark &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; SparkSession&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;builder&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getOrCreate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;val&lt;/span&gt; myRange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; spark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;range&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;toDF&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Number&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;클러스터 모드의 경우, 숫자의 범위가 나뉘어서 서로 다른 여러 익스큐터에 할당된다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;dataframe&quot;&gt;&lt;a href=&quot;#dataframe&quot; aria-label=&quot;dataframe permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dataframe&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Structured API&lt;/li&gt;
&lt;li&gt;데이터를 테이블 형식(Row,Column)으로 표시&lt;/li&gt;
&lt;li&gt;Row 단위로 분산&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;partition&quot;&gt;&lt;a href=&quot;#partition&quot; aria-label=&quot;partition permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Partition&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;데이터의 분할 단위 == 클러스터의 물리적 머신에 존재하는 Row의 집합 &lt;/li&gt;
&lt;li&gt;Dataframe의 파티션은 실행 중에 데이터가 물리적으로 분산되는 방식&lt;/li&gt;
&lt;li&gt;병렬성은 파티션 수와 익스큐터 수에 의해 결정.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;spark-operations-transformation-and-action&quot;&gt;&lt;a href=&quot;#spark-operations-transformation-and-action&quot; aria-label=&quot;spark operations transformation and action permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Spark Operations: Transformation and Action&lt;/h2&gt;
&lt;h3 id=&quot;1-transformation&quot;&gt;&lt;a href=&quot;#1-transformation&quot; aria-label=&quot;1 transformation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Transformation&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;데이터가 immutable 하기 때문에 변경 방법을 계획해두는 것.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// def where(conditionExpr: String): Dataset[Row]&lt;/span&gt;
scala&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; myRange&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;where&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;number % 2 == 0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// DF에서 짝수만 찾기&lt;/span&gt;
res0&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Dataset&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;org&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;apache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;spark&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Row&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;number&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; bigint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;Transformation은 추상적인 변경방법이기 때문에 바로 결과가 나오지 않고, Action을 통해 실행해야한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;dependency-narrow-vs-wide&quot;&gt;&lt;a href=&quot;#dependency-narrow-vs-wide&quot; aria-label=&quot;dependency narrow vs wide permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dependency: Narrow vs. Wide&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Narrow Dependency: 1개의 인풋 파티션 1 -&gt; 1개의 아웃풋 파티션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;where&lt;/code&gt; : 각 인풋 파티션에서 where()을 하여 아웃풋 파티션이 됨.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;메모리&lt;/strong&gt;에서만 실행. 파이프라이닝 수행.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Wide Dependency: 1개의 인풋 파티션 -&gt; n개의 아웃풋 파티션&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;shuffle&lt;/code&gt;: 각 인풋 파티션의 데이터가 여러 아웃풋 파티션으로 분산됨.&lt;/li&gt;
&lt;li&gt;셔플의 결과를 &lt;strong&gt;디스크&lt;/strong&gt;에 저장.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;lazy-evaluation지연-연산&quot;&gt;&lt;a href=&quot;#lazy-evaluation%EC%A7%80%EC%97%B0-%EC%97%B0%EC%82%B0&quot; aria-label=&quot;lazy evaluation지연 연산 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Lazy Evaluation(지연 연산)&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Transformation의 실행 계획 생성, 마지막 순간에 컴파일 —&gt; &lt;strong&gt;전체 데이터 흐름 최적화&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;predicate-pushdown&quot;&gt;&lt;a href=&quot;#predicate-pushdown&quot; aria-label=&quot;predicate pushdown permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Predicate Pushdown&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Predicate: boolean(True or False)을 리턴하는 쿼리 조건. SQL의 경우 WHERE clause.&lt;/li&gt;
&lt;li&gt;필터링을 데이터베이스로 위임하는 쿼리 최적화 기법. 데이터베이스 레벨에서 필터링을 하여 가져오는 레코드 수를 줄이면 처리비용과 시간을 최소화하여 쿼리 성능을 향상시킨다.&lt;/li&gt;
&lt;li&gt;더 볼것. &lt;a href=&quot;https://docs.datastax.com/en/dse/6.0/dse-dev/datastax_enterprise/spark/sparkPredicatePushdown.html&quot;&gt;https://docs.datastax.com/en/dse/6.0/dse-dev/datastax_enterprise/spark/sparkPredicatePushdown.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-action&quot;&gt;&lt;a href=&quot;#2-action&quot; aria-label=&quot;2 action permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Action&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Transformation이 논리적 실행 계획이라면 Action은 실제 계산을 수행.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Action을 지정하면 &lt;strong&gt;스파크 잡&lt;/strong&gt;이 시작된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;scala&quot;&gt;&lt;pre class=&quot;language-scala&quot;&gt;&lt;code class=&quot;language-scala&quot;&gt;scala&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; res0&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;count
res1&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Newline Character]]></title><description><![CDATA[Newline? EOL? Line Feed? Line Break?]]></description><link>https://yunitto.github.io/posts/newline/</link><guid isPermaLink="false">https://yunitto.github.io/posts/newline/</guid><pubDate>Thu, 16 May 2019 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;newline-eolend-of-line-line-feed-line-break&quot;&gt;&lt;a href=&quot;#newline-eolend-of-line-line-feed-line-break&quot; aria-label=&quot;newline eolend of line line feed line break permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Newline, EOL(End-Of-Line), Line Feed, Line Break&lt;/h2&gt;
&lt;p&gt;Newline/EOL/Line Feed/Line Break은 모두 같은 말이다. line의 끝과 새 line의 시작을 나타내는데, OS마다 다른 캐릭터를 쓴다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;\n (ASCII 0x0A)&lt;/code&gt; Line Feed(LF) - Unix and Unix-like systems(Linux, macOS, FreeBSD)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;\r (ASCII 0x0D)&lt;/code&gt; Carriage Return(CR)&lt;/li&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;\r\n (ASCII 0x0D0A)&lt;/code&gt; CRLF - Microsoft Windows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 Newline 캐릭터가 여러 종류가 있으니 텍스트 데이터를 정제할 때 빼먹지 말고 꼼꼼히 처리해주어야한다.&lt;/p&gt;
&lt;h2 id=&quot;라인과-파일-끝에-newline-character을-넣어야-하는-이유&quot;&gt;&lt;a href=&quot;#%EB%9D%BC%EC%9D%B8%EA%B3%BC-%ED%8C%8C%EC%9D%BC-%EB%81%9D%EC%97%90-newline-character%EC%9D%84-%EB%84%A3%EC%96%B4%EC%95%BC-%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;라인과 파일 끝에 newline character을 넣어야 하는 이유 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;라인과 파일 끝에 Newline character을 넣어야 하는 이유&lt;/h2&gt;
&lt;p&gt;라인과 파일 끝을 제대로 인식하기 위해서다. POSIX에서는 Line을 다음과 같이 &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap03.html#tag_03_206&quot;&gt;정의한다.&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A sequence of zero or more non- &lt;newline&gt; characters plus a terminating &lt;newline&gt; character.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;git을 사용할 때 파일 끝에 newline을 추가해주지 않으면 git diff시 &lt;code class=&quot;language-text&quot;&gt;\ No newline at end of file&lt;/code&gt; 문구가 뜬다. 이걸 무시하고 커밋하면 git이 파일의 마지막 줄을 인식하지 못했기 때문에, 이후 같은 파일을 수정할 때 기존의 마지막 줄이 git diff에 포함된다. (꽤 성가시다!)&lt;/p&gt;
&lt;p&gt;유닉스 계열에서 줄 수를 셀 때도 new line이 없으면 마지막 줄을 인식하지 못한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; text.txt
$ xxd text.txt
00000000: &lt;span class=&quot;token number&quot;&gt;6865&lt;/span&gt; 6c6c 6f0a                           hello
$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l text.txt
       &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; text.txt

&lt;span class=&quot;token comment&quot;&gt;# -n option: Do not output the trailing newline.&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; -n &lt;span class=&quot;token string&quot;&gt;&quot;hello&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; text.txt 
$ xxd text.txt
00000000: &lt;span class=&quot;token number&quot;&gt;6865&lt;/span&gt; 6c6c 6f                             hello
$ &lt;span class=&quot;token function&quot;&gt;wc&lt;/span&gt; -l text.txt
       &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; text.txt&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item></channel></rss>